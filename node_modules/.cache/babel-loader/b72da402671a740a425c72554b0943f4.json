{"ast":null,"code":"var _jsxFileName = \"/home/bundi/projects/fiver/Tic-Tac-Toe-React-Flask-Sock/src/components/pages/Board.js\";\nimport React, { Component, useEffect, useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Square from '../functional/Square';\nimport Wait from '../functional/Wait';\nimport Status from '../functional/Status';\nimport ScoreBoard from '../functional/ScoreBoard';\nimport PlayAgain from '../functional/PlayAgain';\nimport qs from 'qs';\nimport socketIOClient from 'socket.io-client';\nimport Visitors from '../functional/Visitor';\nconst ENDPOINT = 'http://127.0.0.1:8081';\nconst socket = socketIOClient(ENDPOINT, {\n  reconnection: true\n});\nexport default function Board(props) {\n  const [game, setGame] = useState(new Array(9).fill(null));\n  const [turn, setTurn] = useState(true);\n  const [end, setEnd] = useState(false);\n  const [statusMessage, setStatusMessage] = useState('');\n  const [waiting, setWaiting] = useState(false);\n  const [players, setPlayers] = useState(['', '']);\n  const [scores, setScores] = useState([1, 0]);\n  const [redirect, setRedirect] = useState(false);\n  const [visitors, setVisitors] = useState([]);\n  const [piece, setPiece] = useState('X');\n  const {\n    permission,\n    name\n  } = qs.parse(window.location.search, {\n    ignoreQueryPrefix: true\n  });\n  useEffect(() => {\n    socket.emit('newRoomJoin');\n    socket.on('waiting', player => {\n      console.log(player);\n      setWaiting(true);\n    });\n    socket.on('starting', (players, visitors) => {\n      console.log(players);\n      setPlayers(players);\n      setVisitors(visitors);\n      setScores(scores);\n      setTurn(permission === 'new' ? true : false);\n      console.log(permission);\n      setPiece(permission === 'new' ? 'O' : 'X');\n      console.log('piece', piece);\n      setWaiting(false);\n    }); //Game play logic events\n\n    socket.on('update', (board, pieceParam) => {\n      handleUpdate(board, pieceParam);\n    });\n    socket.on('win', winner => {\n      console.log(winner);\n      setStatusMessage(`${winner} wins`);\n      setEnd(true);\n    });\n    socket.on('over', () => {\n      setStatusMessage('Game over');\n      setEnd(true);\n    });\n    socket.on('again', board => {\n      console.log('REDIRECT');\n      setEnd(false);\n      setRedirect(false);\n      funcSetBoard(board);\n    });\n    socket.on('visitors', visitors => {\n      setVisitors(visitors);\n    });\n    socket.on('leaderboard', () => {\n      setStatusMessage('LEADERBOARD');\n      setEnd(true);\n    });\n  }, [piece]); //When some one make a move, emit the event to the back end for handling\n\n  const handleClick = index => {\n    if (!game[index] && !end && turn && permission !== 'visit') {\n      socket.emit('move', piece, index);\n    }\n  }; //Setting the states each move when the game haven't ended (no wins or draw)\n\n\n  function handleUpdate(board, pieceParam) {\n    funcSetBoard(board);\n    console.log(board);\n    console.log(pieceParam);\n    funcSetTurn(pieceParam);\n    console.log(players);\n\n    if (handleWin(board)) {\n      var winner = piece === 'O' ? players[0] : players[1];\n      console.log(players);\n      console.log(winner);\n      console.log('winner');\n      socket.emit('win', winner);\n    } else if (handleOver(board)) {\n      socket.emit('over');\n    } else {\n      funcSetMessage();\n    }\n  }\n\n  function handleOver(board) {\n    for (var i = 0; i < board.length; i++) {\n      if (board[i] !== 'X' && board[i] !== 'O') {\n        return false;\n      }\n    }\n\n    return true;\n  } //Setting the states when some one wins\n\n\n  function handleWin(board) {\n    var winStates = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n    for (var i = 0; i < winStates.length; i++) {\n      var winstate = winStates[i];\n\n      if (board[winstate[0]] === piece && board[winstate[1]] === piece && board[winstate[2]] === piece) {\n        setEnd(true);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  const playAgainRequest = () => {\n    console.log('requestfor playagain');\n    socket.emit('playAgainRequest');\n  }; //Handle the restart event from the back end\n\n\n  function handleRestart(gameState, turn) {\n    funcSetBoard(gameState);\n    funcSetTurn(turn);\n    funcSetMessage();\n    setEnd(false);\n  } //Some utilities methods to set the states of the board\n\n\n  function funcSetMessage() {\n    const message = turn ? 'Your Turn' : 'Opponent`s Turn';\n    setStatusMessage(message);\n  }\n\n  function funcSetTurn(pieceParam) {\n    console.log('piece', piece);\n    console.log('pieceParam', pieceParam);\n\n    if (permission !== 'visit') {\n      if (piece === pieceParam) {\n        setTurn(true);\n      } else {\n        setTurn(false);\n      }\n    }\n  }\n\n  function funcSetBoard(gameState) {\n    setGame(gameState);\n  }\n\n  function renderSquare(i) {\n    return /*#__PURE__*/React.createElement(Square, {\n      key: i,\n      value: game[i],\n      player: piece,\n      end: end,\n      id: i,\n      onClick: handleClick,\n      turn: turn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 7\n      }\n    });\n  }\n\n  if (redirect) {\n    return /*#__PURE__*/React.createElement(Redirect, {\n      to: `/`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 7\n      }\n    });\n  } else {\n    const squareArray = [];\n\n    for (let i = 0; i < 9; i++) {\n      const newSquare = renderSquare(i);\n      squareArray.push(newSquare);\n    }\n\n    console.log(squareArray);\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Wait, {\n      display: waiting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Status, {\n      message: statusMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"board\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }\n    }, squareArray), /*#__PURE__*/React.createElement(ScoreBoard, {\n      data: {\n        player1: [players[0], scores[0]],\n        player2: [players[1], scores[1]]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Visitors, {\n      visitors: visitors,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(PlayAgain, {\n      end: end,\n      onClick: playAgainRequest,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }\n    }));\n  }\n}","map":{"version":3,"sources":["/home/bundi/projects/fiver/Tic-Tac-Toe-React-Flask-Sock/src/components/pages/Board.js"],"names":["React","Component","useEffect","useState","Redirect","Square","Wait","Status","ScoreBoard","PlayAgain","qs","socketIOClient","Visitors","ENDPOINT","socket","reconnection","Board","props","game","setGame","Array","fill","turn","setTurn","end","setEnd","statusMessage","setStatusMessage","waiting","setWaiting","players","setPlayers","scores","setScores","redirect","setRedirect","visitors","setVisitors","piece","setPiece","permission","name","parse","window","location","search","ignoreQueryPrefix","emit","on","player","console","log","board","pieceParam","handleUpdate","winner","funcSetBoard","handleClick","index","funcSetTurn","handleWin","handleOver","funcSetMessage","i","length","winStates","winstate","playAgainRequest","handleRestart","gameState","message","renderSquare","squareArray","newSquare","push","player1","player2"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nimport Square from '../functional/Square';\r\nimport Wait from '../functional/Wait'\r\nimport Status from '../functional/Status'\r\nimport ScoreBoard from '../functional/ScoreBoard'\r\nimport PlayAgain from '../functional/PlayAgain'\r\n\r\nimport qs from 'qs'\r\nimport socketIOClient from 'socket.io-client';\r\nimport Visitors from '../functional/Visitor';\r\n\r\nconst ENDPOINT = 'http://127.0.0.1:8081'\r\nconst socket = socketIOClient(ENDPOINT, {reconnection: true})\r\n\r\n\r\nexport default function Board(props) {\r\n  const [game, setGame] = useState(new Array(9).fill(null))\r\n  const [turn, setTurn] = useState(true)\r\n  const [end, setEnd] = useState(false)\r\n  const [statusMessage, setStatusMessage] = useState('')\r\n  const [waiting, setWaiting] = useState(false)\r\n  const [players, setPlayers] = useState(['', ''])\r\n  const [scores,setScores] = useState([1, 0])\r\n  const [redirect, setRedirect] = useState(false)\r\n  const [visitors, setVisitors] = useState([])\r\n  const [piece, setPiece] = useState('X')\r\n  const {permission, name} = qs.parse(window.location.search, {\r\n    ignoreQueryPrefix: true\r\n  })\r\n\r\n  useEffect(() => {\r\n    socket.emit('newRoomJoin')\r\n    socket.on('waiting', (player) => {\r\n      console.log(player);\r\n      setWaiting(true)\r\n    })\r\n\r\n    socket.on('starting', (players, visitors) => {\r\n      console.log(players);\r\n      setPlayers(players)\r\n      setVisitors(visitors)\r\n      \r\n      setScores(scores)\r\n\r\n      setTurn(permission === 'new' ? true : false)\r\n      console.log(permission)\r\n      setPiece(permission === 'new' ? 'O' : 'X')\r\n      console.log('piece', piece)\r\n      setWaiting(false)\r\n    })\r\n\r\n    //Game play logic events\r\n    socket.on('update', (board, pieceParam) => {\r\n      handleUpdate(board, pieceParam)\r\n    })\r\n    socket.on('win', (winner) => {\r\n      console.log(winner);\r\n      setStatusMessage(`${winner} wins`)\r\n      setEnd(true)\r\n    })\r\n    socket.on('over', () => {\r\n      setStatusMessage('Game over')\r\n      setEnd(true)\r\n    })\r\n    socket.on('again', (board) => {\r\n      console.log('REDIRECT');\r\n      setEnd(false)\r\n      setRedirect(false)\r\n      funcSetBoard(board)\r\n    })\r\n    socket.on('visitors', (visitors) => {\r\n      setVisitors(visitors)\r\n    })\r\n    socket.on('leaderboard', () => {\r\n      setStatusMessage('LEADERBOARD')\r\n      setEnd(true)\r\n    })\r\n  }, [piece])\r\n\r\n  //When some one make a move, emit the event to the back end for handling\r\n  const handleClick = (index) => {\r\n    if (!game[index] && !end && turn && permission !== 'visit') {\r\n      socket.emit('move', piece, index)\r\n    }\r\n  }\r\n\r\n  //Setting the states each move when the game haven't ended (no wins or draw)\r\n  function handleUpdate(board, pieceParam) {\r\n    funcSetBoard(board)\r\n    console.log(board)\r\n    console.log(pieceParam);\r\n    funcSetTurn(pieceParam)\r\n    console.log(players);\r\n    if (handleWin(board)) {\r\n      var winner = piece === 'O' ? players[0] : players[1]\r\n      console.log(players);\r\n      console.log(winner);\r\n      console.log('winner')\r\n      socket.emit('win', winner)\r\n      \r\n    } else if (handleOver(board)) {\r\n      socket.emit('over')\r\n    } else {\r\n      funcSetMessage()\r\n    }\r\n  }\r\n\r\n  function handleOver(board) {\r\n    for (var i = 0; i < board.length; i++) {\r\n      if (board[i] !== 'X' && board[i] !== 'O') {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  //Setting the states when some one wins\r\n  function handleWin(board) {\r\n    var winStates = [\r\n      [0, 1, 2], [3, 4, 5], [6, 7, 8],\r\n      [0, 3, 6], [1, 4, 7], [2, 5, 8],\r\n      [0, 4, 8], [2, 4, 6]\r\n    ]\r\n    for (var i = 0; i < winStates.length; i++) {\r\n      var winstate = winStates[i];\r\n      if (board[winstate[0]] === piece\r\n        && board[winstate[1]] === piece\r\n        && board[winstate[2]] === piece) {\r\n        setEnd(true)\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  const playAgainRequest = () => {\r\n    console.log('requestfor playagain');\r\n\r\n    socket.emit('playAgainRequest')\r\n  }\r\n\r\n  //Handle the restart event from the back end\r\n  function handleRestart(gameState, turn) {\r\n    funcSetBoard(gameState)\r\n    funcSetTurn(turn)\r\n    funcSetMessage()\r\n    setEnd(false)\r\n  }\r\n\r\n  //Some utilities methods to set the states of the board\r\n\r\n  function funcSetMessage() {\r\n    const message = turn ? 'Your Turn' : 'Opponent`s Turn'\r\n    setStatusMessage(message)\r\n  }\r\n\r\n  function funcSetTurn(pieceParam) {\r\n    console.log('piece', piece)\r\n    console.log('pieceParam', pieceParam)\r\n    if (permission !== 'visit') {\r\n      if (piece === pieceParam) {\r\n        setTurn(true)\r\n      } else {\r\n        setTurn(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  function funcSetBoard(gameState) {\r\n    setGame(gameState)\r\n  }\r\n\r\n  function renderSquare(i) {\r\n    return (\r\n      <Square key={i} value={game[i]}\r\n              player={piece}\r\n              end={end}\r\n              id={i}\r\n              onClick={handleClick}\r\n              turn={turn}/>\r\n    )\r\n  }\r\n\r\n\r\n  if (redirect) {\r\n    return (\r\n      <Redirect to={`/`}/>\r\n    )\r\n  } else {\r\n    const squareArray = []\r\n    for (let i = 0; i < 9; i++) {\r\n      const newSquare = renderSquare(i)\r\n      squareArray.push(newSquare)\r\n    }\r\n    \r\n    console.log(squareArray);\r\n    return (\r\n      <>\r\n        <Wait display={waiting}/>\r\n        <Status message={statusMessage}/>\r\n        <div className=\"board\">\r\n          {squareArray}\r\n        </div>\r\n        <ScoreBoard data={{player1: [players[0], scores[0]], player2: [players[1], scores[1]]}}/>\r\n        <Visitors visitors={visitors}/>\r\n        <PlayAgain end={end} onClick={playAgainRequest}/>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}